# -*- coding: utf-8 -*-
import configur
import telebot
from telebot import types
import datetime
import xmltodict
import requests
from pyowm import OWM
from pyowm.utils import config
import emoji
import geopy
from geopy.geocoders import Nominatim


bot = telebot.TeleBot(configur.token)
config_dict = config.DEFAULT_CONFIG
config_dict['language'] = 'ru'

owm = OWM(configur.id_two)
mgr = owm.weather_manager()


@bot.message_handler(commands=['start'])
def message_start(message):
    # keyboard
    markup = types.ReplyKeyboardMarkup(resize_keyboard="True")
    item1 = types.KeyboardButton('/currency')
    item2 = types.KeyboardButton('–ë–æ–≥–æ—Ä–æ–¥—Å–∫')
    item3 = types.KeyboardButton('–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥')
    item4 = types.KeyboardButton(emoji.emojize(':round_pushpin: –¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'), request_location= True)
    #item5 = types.KeyboardButton(emoji.emojize(':apple: /weather'))
    markup.add(item1, item2, item3, item4)

    bot.send_message(message.chat.id,
                     emoji.emojize('<strong>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, ' + message.from_user.first_name +
                                   ' !</strong>:wave:\n–ë–æ—Ç —Å–æ–∑–¥–∞–Ω <a href="https://t.me/rige214">–±–µ–∑—É–∫–æ—Ä–∏–∑–Ω–µ–Ω–Ω—ã–º –ª–µ–Ω—Ç—è–µ–º</a>, –ø–æ—ç—Ç–æ–º—É —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ—Å—å–±–∞!'
                                   ' <em> –ù–µ –æ–∂–∏–¥–∞–π—Ç–µ –∏–¥–µ–∞–ª—å–Ω–æ–π –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã.–°–ø–∞—Å–∏–±–æ!</em>'
                                   '\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É,–Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ —Ç–µ–±–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞'
                                   '\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–ë–æ–≥–æ—Ä–æ–¥—Å–∫</code>\n\n<code>–ï—Å–ª–∏ —É –í–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ</code>', use_aliases=True),
                     parse_mode="HTML", reply_markup=markup)


@bot.message_handler(commands=['currency'])
def get_rates(message):
    try:
        get_curl = 'https://cbr.ru/scripts/xml_daily.asp'
        date_format = '%d/%m/%Y'
        today = datetime.date.today()
        params = {
            "date_req": today.strftime(date_format),
        }
        r = requests.get(get_curl, params=params)

        data = xmltodict.parse(r.text)

        section_id1 = 'R01235'  # dollar
        section_id2 = 'R01239'  # euro
        section_id3 = 'R01720'  # grivna
        section_id4 = 'R01820'  # yen

        for item in data['ValCurs']['Valute']:
            if item['@ID'] == section_id1:
                currency_rate1 = item['Value']
                bot.send_message(message.chat.id, '–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç (' + str(today) + ') –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç —Ç–∞–∫–æ–≤—ã: ')
                bot.send_message(message.chat.id, '1 –î–æ–ª–ª–∞—Ä üá∫üá∏: ' + currency_rate1 + ' —Ä—É–±–ª–µ–π')
                break

        for item in data['ValCurs']['Valute']:
            if item['@ID'] == section_id2:
                currency_rate2 = item['Value']
                bot.send_message(message.chat.id, '1 –ï–≤—Ä–æ üá™üá∫: ' + currency_rate2 + ' —Ä—É–±–ª–µ–π')
                break

        for item in data['ValCurs']['Valute']:
            if item['@ID'] == section_id3:
                currency_rate3 = item['Value']
                bot.send_message(message.chat.id, '10 –ì—Ä–∏–≤–µ–Ω üá∫üá¶: ' + currency_rate3 + ' —Ä—É–±–ª–µ–π')
                break

        for item in data['ValCurs']['Valute']:
            if item['@ID'] == section_id4:
                currency_rate4 = item['Value']
                bot.send_message(message.chat.id, '1 –ô–µ–Ω–∞ üáØüáµ: ' + currency_rate4 + ' —Ä—É–±–ª–µ–π')
                break
    except:
        bot.send_message(message.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ' + ' " ' + message.text + ' " ')


@bot.message_handler(content_types=['text'])
def send_weather(message):
    try:
        observation = mgr.weather_at_place(message.text)
        weather = observation.weather
        wind_speed = weather.wind()['speed']
        temp = weather.temperature('celsius')['temp']
        temp_feels = weather.temperature('celsius')['feels_like']
        answer = "–í –≥–æ—Ä–æ–¥–µ <code>" + message.text + "</code>\n–°–µ–π—á–∞—Å <code>" + weather.detailed_status + "</code>"
        answer += "\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ :  <code>" + str(temp) + "</code>  ‚ÑÉ"
        answer += "\n–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ :  <code>" + str(temp_feels) + "</code>  ‚ÑÉ"
        answer += "\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ :  <code>" + str(wind_speed) + "</code>  –ú/—Å"
        bot.send_message(message.chat.id, answer, parse_mode="HTML")
    except:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ' + ' " ' + message.text + ' " ')


@bot.message_handler(content_types=["location"])
def location(message):
    if message.location is not None:
        observation = mgr.one_call(lat=message.location.latitude, lon=message.location.longitude)
        geolocation = Nominatim(user_agent="Rge")
        pos = str(message.location.latitude) + ',' + str(message.location.longitude)
        loc = geolocation.reverse(pos, exactly_one=True, timeout=1,  addressdetails=True)
        place = loc.address
        temp = observation.current.temperature('celsius').get('temp', None)
        temp_feels_like = observation.current.temperature('celsius').get('feels_like', None)
        wind = observation.current.wind().get('speed', 0)
        status = observation.current.detailed_status
        message_loc = "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–¥—Ä–µ—Å—É <code>" + str(place) + "</code>\n\n–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ –¥–∞–Ω–Ω–æ–º –º–µ—Å—Ç–µ —Å–µ–π—á–∞—Å —Å–ª–µ–¥—É—é—â–∞—è : <code>" + str(status) + "</code>"
        message_loc += "\n\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ :  <code>" + str(temp) + "</code>  ‚ÑÉ"
        message_loc += "\n\n–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ :  <code>" + str(temp_feels_like) + "</code>  ‚ÑÉ"
        message_loc += "\n\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ :  <code>" + str(wind) + "</code>  –ú/—Å"
        bot.send_message(message.chat.id, message_loc, parse_mode="HTML")
    else:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ!')

@bot.message_handler(commands=['weather'])
def prg (message):
    observation = mgr.one_call(lat=message.location.latitude, lon=message.location.longitude)
    geolocation = Nominatim(user_agent="Rge")
    pos = str(message.location.latitude) + ',' + str(message.location.longitude)
    loc = geolocation.reverse(pos, exactly_one=True, timeout=1, addressdetails=True)
    place = loc.address
    wind_speed = observation.forecast_daily.wind().get('speed', 0)
    temp = observation.forecast_daily.temperature('celsius').get('temp', None)
    # temp_feels = weth.temperature('celsius')['feels_like']
    answer = "–í –≥–æ—Ä–æ–¥–µ <code>" + place + "</code>\n–°–µ–π—á–∞—Å <code>" + weth.detailed_status + "</code>"
    answer += "\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ :  <code>" + str(temp) + "</code>  ‚ÑÉ"
    # answer += "\n–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ :  <code>" + str(temp_feels) + "</code>  ‚ÑÉ"
    answer += "\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ :  <code>" + str(wind_speed) + "</code>  –ú/—Å"
    bot.send_message(message.chat.id, answer, parse_mode="HTML")



bot.polling(none_stop=True)

